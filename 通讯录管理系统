#include <iostream>
using namespace std;
#define MAX 100
#include <string>

/*********输出菜单功能*********/
void showMenu()
{
	cout << "****************************" << endl;
	cout << "******  1.添加联系人  ******" << endl;
	cout << "******  2.显示联系人  ******" << endl;
	cout << "******  3.删除联系人  ******" << endl;
	cout << "******  4.查找联系人  ******" << endl;
	cout << "******  5.修改联系人  ******" << endl;
	cout << "******  6.清空联系人  ******" << endl;
	cout << "******  0.退出通讯录  ******" << endl;
	cout << "****************************" << endl;
}

/*********1、添加联系人*********/
//设计联系人的结构体
struct Person
{
	string m_Name;
	int m_Sex;//1.男，2.女
	int m_Age;
	string m_Tell;
	string m_Address;
};

//设计通讯录结构体
struct Addressbooks
{
	//通讯录中保存的联系人数组
	struct Person personArray[MAX];
	//通讯录中当前记录联系人个数
	int m_Size;
};

void addPerson(struct Addressbooks * abs)
{
	//判断通讯录是否已满，如果满了则不添加
	if (abs->m_Size == MAX)
	{
		cout << "通讯录已满，无法添加！" << endl;
		return;
	}
	else {
		//添加具体联系人
		//姓名
		string name;
		cout << "请输入姓名：" << endl;
		cin >> name;
		abs->personArray[abs->m_Size].m_Name = name;
		//性别
		int sex = 0;
		while (true)
		{
			cout << "请输入性别：" << endl;
			cout << "1 --- 男 " << endl;
			cout << "2 --- 女 " << endl;
			cin >> sex;
			if (sex == 1 || sex == 2)
			{
				abs->personArray[abs->m_Size].m_Sex = sex;
				break;
			}
			cout << "输入有误，请重新输入！" << endl;
		}
		//年龄
		int age;
		cout << "请输入年龄：" << endl;
		while (true)
		{
			cin >> age;
			if (age > 0 && age <150) 
			{
				abs->personArray[abs->m_Size].m_Age = age;
				break;
			}
			cout << "输入的年龄不符合范围" << endl;
		}
		//电话
		string tell;
		cout << "请输入联系电话：" << endl;
		cin >> tell;
		abs->personArray[abs->m_Size].m_Tell = tell;
		//住址
		string address;
		cout << "请输入家庭住址：" << endl;
		cin >> address;
		abs->personArray[abs->m_Size].m_Address = address;
		//更新通讯录中的人数
		abs->m_Size++;
		cout << "更新成功！" << endl;
		//
		system("pause");//请按任意键继续
		system("cls");//清屏 clear screen
	}
};

/*********2、显示联系人*********/
void showPerson(struct Addressbooks * abs)
{
	//判断通讯录中人数是否为0，如果为0，提示记录为空，如果不为0，显示记录的联系人信息
	if (abs->m_Size == 0) {
		cout << "当前记录为空" << endl;
	}
	else {
		for (int i = 0; i < abs->m_Size; i++)
		{
			cout << "姓名：" << abs->personArray[i].m_Name 
				<< "\t性别：" << (abs->personArray[i].m_Sex==1?"男":"女")
				<< "\t年龄：" << abs->personArray[i].m_Age 
				<< "\t电话：" << abs->personArray[i].m_Tell 
				<< "\t住址：" << abs->personArray[i].m_Address << endl;
		}
	}
	system("pause");//请按任意键继续
	system("cls");//清屏 clear screen
}

/*********3、删除联系人*********/
//查找通讯录中有无此人
int isExist(struct Addressbooks* abs, string name)
{
	//遍历通讯录
	for (int i = 0; i < abs->m_Size; i++)
	{
		if (name == abs->personArray[i].m_Name)
		{
			//返回此人在数组中的下标编号
			//cout << "找到此人" << endl;
			return i;
		}
	}
	//cout << "查无此人" << endl;
	return -1;
	
}

void deletePerson(struct Addressbooks* abs)
{
	string name;
	cout << "请输入您要删除的联系人" << endl;
	cin >> name;
	//ret == -1 :未查到 ； ret != -1:查到
	//ret !=-1时，为联系人的下标位置
	int ret = isExist(abs, name);//abs在delete中已经是指针，所以不需要&
	if (ret == -1)
	{
		cout << "查无此人" << endl;
	}
	else { //查到此人—> 删除此人
		for (int i = ret; i < abs->m_Size; i++)
		{
			abs->personArray[i] = abs->personArray[i + 1];//将第i+1条数据覆盖到第i条
		}
		abs->m_Size--;//更新通讯录中的人员数
		cout << "删除成功" << endl;
	}
	system("pause");
	system("cls");
}

/*********4、查找联系人*********/
void findPerson(struct Addressbooks* abs)
{
	string name;
	cout << "请输入您要查找的联系人：" << endl;
	cin >> name;
	int ret = isExist(abs, name);
	if (ret != -1) { //找到了
		cout << "姓名：" << abs->personArray[ret].m_Name
			<< "\t性别：" << (abs->personArray[ret].m_Sex == 1 ? "男" : "女")
			<< "\t年龄：" << abs->personArray[ret].m_Age
			<< "\t电话：" << abs->personArray[ret].m_Tell
			<< "\t住址：" << abs->personArray[ret].m_Address << endl;
	}
	else { //没有找到
		cout << "查无此人" << endl;
	}
	system("pause");
	system("cls");
}

/*********5、修改联系人*********/
void modifyPerson(struct Addressbooks * abs)
{
	string name;
	cout << "请输入要修改的联系人姓名：" << endl;
	cin >> name;
	int ret = isExist(abs, name);
	if (ret != -1) //查到此人
	{
		//姓名
		string name;
		cout << "请输入姓名：" << endl;
		cin >> name;
		abs->personArray[ret].m_Name = name;
		//性别
		int sex = 0;
		while (true)
		{
			cout << "请输入性别：" << endl;
			cout << "1 --- 男 " << endl;
			cout << "2 --- 女 " << endl;
			cin >> sex;
			if (sex == 1 || sex == 2)
			{
				abs->personArray[ret].m_Sex = sex;
				break;
			}
			cout << "输入有误，请重新输入！" << endl;
		}
		//年龄
		int age;
		cout << "请输入年龄：" << endl;
		while (true)
		{
			cin >> age;
			if (age > 0 && age < 150)
			{
				abs->personArray[ret].m_Age = age;
				break;
			}
			cout << "输入的年龄不符合范围" << endl;
		}
		//电话
		string tell;
		cout << "请输入联系电话：" << endl;
		cin >> tell;
		abs->personArray[ret].m_Tell = tell;
		//住址
		string address;
		cout << "请输入家庭住址：" << endl;
		cin >> address;
		abs->personArray[ret].m_Address = address;
		
		cout << "修改成功" << endl;
	}
	else {//查无此人
		cout << "查无此人" << endl;
	}
	system("pause");
	system("cls");
}

/*********6、清空联系人*********/
void cleanPerson(struct Addressbooks* abs)
{
	int x = 0;
	cout << "您确定要清空通讯录吗?" << endl;
	cout << "1 --- 确认！" << endl;
	cin >> x;
	if (x == 1)
	{
		abs->m_Size = 0; //将当前记录联系人数量置为0，做逻辑清空操作
		cout << "通讯录已经清空！" << endl;
	}
	system("pause");
	system("cls");
}

int main()
{
	//创建通讯录结构体变量
	Addressbooks abs;
	//初始化通信录当前人数个数
	abs.m_Size = 0;

	int num = 0;
	while (true)
	{
		//菜单调用
		showMenu();
		
		cin >> num;
		switch (num)
		{
		case 1://添加联系人
			addPerson(&abs); //利用地址传递，可以修改
			break;
		case 2://显示联系人
			showPerson(&abs);
			break;
		case 3://删除联系人
		{
			deletePerson(&abs);
			break;
		}
		case 4://查找联系人
			findPerson(&abs);
			break;
		case 5://修改联系人
			modifyPerson(&abs);
			break;
		case 6://清空联系人
			cleanPerson(&abs);
			break;
		case 0://退出通讯录
			cout << "欢迎下次使用" << endl;
			system("pause"); //按任意键退出系统
			return 0;
			break;
		default:
			break;
		}
	}
	system("pause");
	return 0;
}
